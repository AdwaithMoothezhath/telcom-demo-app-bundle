## Default values.yaml for Telegraf
## This is a YAML-formatted file.
## ref: https://hub.docker.com/r/library/telegraf/tags/

replicaCount: 1

image:
  repo: "telegraf"
  tag: "1.25-alpine"
  pullPolicy: IfNotPresent

podAnnotations: {}

podLabels: {}

imagePullSecrets: []

## Configure args passed to Telegraf containers
args: []


# The name of a secret in the same kubernetes namespace which contains values to
# be added to the environment (must be manually created)
# This can be useful for auth tokens, etc.

# envFromSecret: "telegraf-tokens"


env:
  - name: HOSTNAME
    value: "telegraf-polling-service"

# An older "volumeMounts" key was previously added which will likely
# NOT WORK as you expect. Please use this newer configuration.

# volumes:
# - name: telegraf-output-influxdb2
#   configMap:
#     name: "telegraf-output-influxdb2"
# mountPoints:
# - name: telegraf-output-influxdb2
#   mountPath: /etc/telegraf/conf.d
#   subPath: influxdb2.conf


## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
resources: {}
  # requests:
  #   memory: 128Mi
  #   cpu: 100m
  # limits:
  #   memory: 128Mi
  #   cpu: 100m

## Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

## Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Tolerations for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
# - key: "key"
#   operator: "Equal|Exists"
#   value: "value"
#   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

service:
  enabled: false
  type: LoadBalancer
  annotations: {}

rbac:
  # Specifies whether RBAC resources should be created
  create: true
  # Create only for the release namespace or cluster wide (Role vs ClusterRole)
  clusterWide: false
  # Rules for the created rule
  rules: []
# When using the prometheus input to scrape all pods you need extra rules set to the ClusterRole to be
# able to scan the pods for scraping labels. The following rules have been taken from:
# https://github.com/helm/charts/blob/master/stable/prometheus/templates/server-clusterrole.yaml#L8-L46
#    - apiGroups:
#        - ""
#      resources:
#        - nodes
#        - nodes/proxy
#        - nodes/metrics
#        - services
#        - endpoints
#        - pods
#        - ingresses
#        - configmaps
#      verbs:
#        - get
#        - list
#        - watch
#    - apiGroups:
#        - "extensions"
#      resources:
#        - ingresses/status
#        - ingresses
#      verbs:
#        - get
#        - list
#        - watch
#    - nonResourceURLs:
#        - "/metrics"
#      verbs:
#        - get

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
  # Annotations for the ServiceAccount
  annotations: {}

## Exposed telegraf configuration
## For full list of possible values see `/docs/all-config-values.yaml` and `/docs/all-config-values.toml`
## ref: https://docs.influxdata.com/telegraf/v1.1/administration/configuration/
config:
  agent:
    interval: "10s"
    round_interval: true
    metric_batch_size: 1000
    metric_buffer_limit: 10000
    collection_jitter: "0s"
    flush_interval: "10s"
    flush_jitter: "0s"
    precision: ""
    debug: true
    quiet: false
    logfile: ""
    hostname: "$HOSTNAME"
    omit_hostname: false
  processors:
    - enum:
        mapping:
          field: "status"
          dest: "status_code"
          value_mappings:
            healthy: 1
            problem: 2
            critical: 3
  outputs:
    - influxdb:
        urls:
          - "http://project-metrics.examples.svc.cluster.local:8086"
        database: "vsphere"
        username: hwhbGqnnlX
        password: u5mWA5xY2c
    - http:
        url: "http://ingest-gateway.examples.svc.cluster.local/v1/scope/examples/stream/vsphere/event?routingKeyType=none&addTimestamp=Timestamp"
        timeout: "5s"
        method: "POST"
        data_format: "json"
        headers:
          Content-Type: "application/json; charset=utf-8"
          X-Pravega-Client-ID: "vsphere"
          X-Pravega-Secret: "DwO5ealYO2tyBoPcmF8nFpXdsWHn4qqc"
  inputs:
    - vsphere:
        insecure_skip_verify: true
        vcenters: ["https://10.243.61.115/sdk"]
        username: "administrator@vsphere.local"
        password: "Testvxrail123!"
        #cluster_metric_include: []
        #datastore_metric_include: []
        host_metric_include: [
              "cpu.coreUtilization.average",
              "cpu.costop.summation",
              "cpu.demand.average",
              "cpu.idle.summation",
              "cpu.latency.average",
              "cpu.readiness.average",
              "cpu.ready.summation",
              "cpu.swapwait.summation",
              "cpu.usage.average",
              "cpu.usagemhz.average",
              "cpu.used.summation",
              "cpu.utilization.average",
              "cpu.wait.summation",
              "disk.deviceReadLatency.average",
              "disk.deviceWriteLatency.average",
              "disk.kernelReadLatency.average",
              "disk.kernelWriteLatency.average",
              "disk.numberReadAveraged.average",
              "disk.numberWriteAveraged.average",
              "disk.read.average",
              "disk.totalReadLatency.average",
              "disk.totalWriteLatency.average",
              "disk.write.average",
              "mem.active.average",
              "mem.latency.average",
              "mem.state.latest",
              "mem.swapin.average",
              "mem.swapinRate.average",
              "mem.swapout.average",
              "mem.swapoutRate.average",
              "mem.totalCapacity.average",
              "mem.usage.average",
              "mem.overhead.average",
              "mem.vmmemctl.average",
              "net.bytesRx.average",
              "net.bytesTx.average",
              "net.droppedRx.summation",
              "net.droppedTx.summation",
              "net.errorsRx.summation",
              "net.errorsTx.summation",
              "net.usage.average",
              "power.power.average",
              "storageAdapter.numberReadAveraged.average",
              "storageAdapter.numberWriteAveraged.average",
              "storageAdapter.read.average",
              "storageAdapter.write.average",
              "sys.uptime.latest"
        ]
        vm_metric_include: [
              "cpu.demand.average",
              "cpu.idle.summation",
              "cpu.latency.average",
              "cpu.readiness.average",
              "cpu.ready.summation",
              "cpu.run.summation",
              "cpu.usagemhz.average",
              "cpu.used.summation",
              "cpu.wait.summation",
              "mem.active.average",
              "mem.granted.average",
              "mem.latency.average",
              "mem.swapin.average",
              "mem.swapinRate.average",
              "mem.swapout.average",
              "mem.swapoutRate.average",
              "mem.usage.average",
              "mem.vmmemctl.average",
              "net.bytesRx.average",
              "net.bytesTx.average",
              "net.droppedRx.summation",
              "net.droppedTx.summation",
              "net.usage.average",
              "power.power.average",
              "virtualDisk.numberReadAveraged.average",
              "virtualDisk.numberWriteAveraged.average",
              "virtualDisk.read.average",
              "virtualDisk.readOIO.latest",
              "virtualDisk.throughput.usage.average",
              "virtualDisk.totalReadLatency.average",
              "virtualDisk.totalWriteLatency.average",
              "virtualDisk.write.average",
              "virtualDisk.writeOIO.latest",
              "sys.uptime.latest"
        ]

metrics:
  health:
    enabled: false
    service_address: "http://:8880"
    threshold: 5000.0
    namepass: "internal_write"
    tagpass: '{ output = ["http"] }'
    compares:
      field: buffer_size
      lt: 5000.0
    contains:
      field: buffer_size
  internal:
    enabled: true
    collect_memstats: false

# Lifecycle hooks
# hooks:
#   postStart: ["/bin/sh", "-c", "echo Telegraf started"]
#   preStop: ["/bin/sh", "-c", "sleep 60"]

## Pod disruption budget configuration
##
pdb:
  ## Specifies whether a Pod disruption budget should be created
  ##
  create: true
  minAvailable: 1
  # maxUnavailable: 1
